<?xml version="1.0" encoding="UTF-8" ?><flamingodoc><title>Flamingo Component Reference</title><generated>Wed Dec 27 03:37:53 GMT+0100 2006</generated><component><name>Flamingo Framework</name><configstyle name=".tooltip"><name>.tooltip</name><description>css-style for tooltips</description></configstyle><configstyle name=".preloadtitle"><name>.preloadtitle</name><description>css-style for title on logo</description></configstyle><file>flamingo.as  (sourcefile)</file><file>flamingo.fla (sourcefile)</file><file>flamingo.swf (compiled framework, needed for publication on internet)</file><file>flamingo.xml (configurationfile for framework, needed for publication on internet)</file><description>This class is the framework of Flamingo MapComponents. It provides several methods to load, manage and control the (map)components. A configuration file determines which components have to be loaded and how they interact with eachother.</description><configtags><configtag name="&lt;cursor&gt;"><name>&lt;cursor&gt;</name><attribute name="id"><name>id</name><description>Unique identifier. See the components documentation for supported id's.</description></attribute><attribute name="xoffset"><name>xoffset</name><description>Offset in pixels of the cursor's hotspot. By default this is on the upperleft of the cursor. When using a swf as a cursor, the hotspot can be defined in the swf.</description></attribute><attribute name="yoffset"><name>yoffset</name><description>See xoffset.</description></attribute><attribute name="url"><name>url</name><description>The filename of the swf, png or jpg which contains the cursor. When using relative filenames, the path is always relative to flamingo.swf</description></attribute><example><![CDATA[<dt>&lt;flamingo&gt;</dt> <dd>&lt;cursor id="grab" url="fmc/cursor/CursorGrabWrinkle.swf" /&gt;</dd> <dt>&lt;/flamingo&gt;</dt>]]></example><hierarchy>child-node of &lt;flamingo&gt; or child-node of &lt;fmc:{component}&gt;</hierarchy><description>With cursor you can add custom cursors to flamingo. This tag can be situated in the configuration file of a component or in the configuration file of an application.</description></configtag><configtag name="&lt;flamingo&gt;"><name>&lt;flamingo&gt;</name><attribute name="preloadtitle"><name>preloadtitle</name><description>Title which is shown in the preload-logo. If undefined then flamingo will show loading progress per component.</description></attribute><attribute name="tooltipdelay"><name>tooltipdelay</name><description>(defaultvalue &quot;500&quot;) Time in milliseconds (1000 = 1 second) between showing a tooltip and moving the mouse over a component.</description></attribute><attribute name="lang"><name>lang</name><description>(defaultvalue &quot;en&quot;) The language of the application.</description></attribute><attribute name="languages"><name>languages</name><description>(defaultvalue &quot;en&quot;) Comma seperated list of 'lang' abbreviations. e.g. languages=&quot;en,nl,de&quot; Flamingo will load these language strings. By default only english strings are loaded. When languages=&quot;&quot; flamingo will load all available language strings.</description></attribute><attribute name="minwidth"><name>minwidth</name><description>The minimum width of the application in pixels.</description></attribute><attribute name="maxwidth"><name>maxwidth</name><description>The maximum width of the application in pixels.</description></attribute><attribute name="maxheight"><name>maxheight</name><description>The maximum height of the application in pixels.</description></attribute><attribute name="minheight"><name>minheight</name><description>The minimum height of the application in pixels.</description></attribute><attribute name="width"><name>width</name><description>(defaultvalue &quot;100%&quot;) The width of the application. By default the application fills the available space of the flamingo.swf. This space is controled in the html page.</description></attribute><attribute name="height"><name>height</name><description>(defaultvalue &quot;100%&quot;) The height of the application. By default the application fills the available space of the flamingo.swf. This space is controled in the html page.</description></attribute><attribute name="commtojava"><name>commtojava</name><description>(defaultvalue &quot;true&quot;) If set to &quot;true&quot; flamingo will pass all events to the browser.</description></attribute><attribute name="bordercolor"><name>bordercolor</name><description>Color of a border arround the application in a hexadecimal notation. e.g. bordercolor=&quot;#00ff33&quot;</description></attribute><attribute name="borderwidth"><name>borderwidth</name><description>Width of the border in pixels. If set to &quot;0&quot; (meaning 'hairline') or greater Flamingo will draw a border.</description></attribute><attribute name="borderalpha(defaultvalue"><name>borderalpha(defaultvalue</name><description>&quot;100&quot;) Transparency of border. Default is &quot;100&quot; meaning opaque.</description></attribute><attribute name="backgroundcolor"><name>backgroundcolor</name><description>Color of the backgound in hexadecimal notation. If set, Flamingo will have a background, otherwhise Flamingo's background is transparent.</description></attribute><attribute name="backgroundalpha(defaultvalue"><name>backgroundalpha(defaultvalue</name><description>&quot;100&quot;) Transparency of background if backgroundcolor is set.</description></attribute><example><![CDATA[<dt>&lt;flamingo xmlns:fmc="fmc" lang="en" languages="en,nl" commtojava="true"   &gt;</dt> <dd>...</dd> <dd>child tags</dd> <dd>...</dd> <dt>&lt;/flamingo&gt;</dt>]]></example><hierarchy>root-node</hierarchy><description>Each configuration file starts with the 'flamingo' node. This node is a good place to define the namespaces for the componentnodes.</description></configtag><configtag name="&lt;string&gt;"><name>&lt;string&gt;</name><attribute name="id"><name>id</name><description>Unique identifier. See the components documentation for supported id's.</description></attribute><attribute name="{lang}"><name>{lang}</name><description>You can define your own 'lang' attributes, followed by the correct string. See  example.</description></attribute><example><![CDATA[<dt>&lt;flamingo  lang="nl" languages="en,nl" &gt;</dt> <dd>&lt;fmc:Window&gt;</dd> <dd>&lt;string id="title" en="title" nl="titel" /&gt;</dd> <dd>&lt;/fmc:Window&gt;</dd> <dt>&lt;/flamingo&gt;</dt>]]></example><hierarchy>child-node of &lt;flamingo&gt; or child-node of &lt;fmc:{component}&gt;</hierarchy><description>With string you can add multi-language support to flamingo. This tag can be situated in the configuration file of a component or in the configuration file of an application.</description></configtag><configtag name="&lt;style&gt;"><name>&lt;style&gt;</name><attribute name="id"><name>id</name><description>Unique identifier. See the components documentation for supported id's.</description></attribute><attribute name="color"><name>color</name><description>Only hexadecimal color values are supported. Named colors (such as blue) are not supported. Colors are written in the following format: #FF0000.</description></attribute><attribute name="display"><name>display</name><description>Supported values are inline, block, and none.</description></attribute><attribute name="font-family"><name>font-family</name><description>A comma-separated list of fonts to use, in descending order of desirability. Any font family name can be used. If you specify a generic font name, it is converted to an appropriate device font. The following font conversions are available: mono is converted to _typewriter, sans-serif is converted to _sans, and serif is converted to _serif.</description></attribute><attribute name="font-size"><name>font-size</name><description>Only the numeric part of the value is used. Units (px, pt) are not parsed; pixels and points are equivalent.</description></attribute><attribute name="font-style"><name>font-style</name><description>Recognized values are normal and italic.</description></attribute><attribute name="font-weight"><name>font-weight</name><description>Recognized values are normal and bold.</description></attribute><attribute name="kerning"><name>kerning</name><description>Recognized values are true and false. Kerning is supported for embedded fonts only. Certain fonts, such as Courier New, do not support kerning. The kerning property is only supported in SWF files created in Windows, not in SWF files created on the Macintosh. However, these SWF files can be played in non-Windows versions of Flash Player and the kerning still applies.</description></attribute><attribute name="letter-spacing"><name>letter-spacing</name><description>The amount of space that is uniformly distributed between characters. The value specifies the number of pixels that are added to the advance after each character. A negative value condenses the space between characters. Only the numeric part of the value is used. Units (px, pt) are not parsed; pixels and points are equivalent.</description></attribute><attribute name="margin-left"><name>margin-left</name><description>Only the numeric part of the value is used. Units (px, pt) are not parsed; pixels and points are equivalent.</description></attribute><attribute name="margin-right"><name>margin-right</name><description>Only the numeric part of the value is used. Units (px, pt) are not parsed; pixels and points are equivalent.</description></attribute><attribute name="text-align"><name>text-align</name><description>Recognized values are left, center, right, and justify.</description></attribute><attribute name="text-decoration"><name>text-decoration</name><description>Recognized values are none and underline.</description></attribute><attribute name="text-indent"><name>text-indent</name><description>Only the numeric part of the value is used. Units (px, pt) are not parsed; pixels and points are equivalent.</description></attribute><example><![CDATA[<dt>&lt;flamingo&gt;</dt> <dd>&lt;style id=".tooltip" font-family="Verdana" font-size="11" color="#000088" display="block"/&gt;</dd> <dt>&lt;/flamingo&gt;</dt>]]></example><hierarchy>child-node of &lt;flamingo&gt; or child-node of &lt;fmc:{component}&gt;</hierarchy><description>With style you can css-support to flamingo. This tag can be situated in the configuration file of a component or in the configuration file of an application.</description></configtag><configtag name="&lt;xguide&gt;"><name>&lt;xguide&gt;</name><attribute name="id"><name>id</name><description>Unique identifier. You can define youre own.</description></attribute><attribute name="x"><name>x</name><description>position, absolute (in pixels) or percentage (%). e.g.  x=&quot;50&quot; or x=&quot;50%&quot;</description></attribute><example><![CDATA[<dt>&lt;flamingo  lang="nl" languages="en,nl" &gt;</dt> <dd>&lt;xguide id="x50 x="50" /&gt;</dd> <dt>&lt;/flamingo&gt;</dt>]]></example><hierarchy>child-node of &lt;flamingo&gt; or child-node of &lt;fmc:{component}&gt;</hierarchy><description>With xguide you can add invisible vertical lines to flamingo at which components can be aligned. This tag is situated in the configuration file of an application. There are two default yguides: "left" and "right", referering to the outer bounds of the movie.</description></configtag><configtag name="&lt;yguide&gt;"><name>&lt;yguide&gt;</name><attribute name="id"><name>id</name><description>Unique identifier. You can define youre own.</description></attribute><attribute name="y"><name>y</name><description>position, absolute (in pixels) or percentage (%). e.g.  y=&quot;50&quot; or y=&quot;50%&quot;</description></attribute><example><![CDATA[<dt>&lt;flamingo  lang="nl" languages="en,nl" &gt;</dt> <dd>&lt;yguide id="y50 y="50" /&gt;</dd> <dt>&lt;/flamingo&gt;</dt>]]></example><hierarchy>child-node of &lt;flamingo&gt; or child-node of &lt;fmc:{component}&gt;</hierarchy><description>With yguide you can add invisible horizontal lines to flamingo at which components can be aligned. This tag is situated in the configuration file of an application. There are two default yguides: "top" and "bottom", referering to the outer bounds of the movie.</description></configtag><configtag name="&lt;{component}&gt;"><name>&lt;{component}&gt;</name><attribute name="id"><name>id</name><description>Unique identifier. Usefull when components have to listen to eachother.</description></attribute><attribute name="name"><name>name</name><description>Name</description></attribute><attribute name="width"><name>width</name><description>Width of a component. In pixels or percentage. e.g. width=&quot;100&quot;  or width=&quot;100%&quot;</description></attribute><attribute name="height"><name>height</name><description>Height of a component. In pixels or percentage. e.g. height=&quot;100&quot;  or height=&quot;100%&quot;</description></attribute><attribute name="left"><name>left</name><description>Left position of a component, can be a number (left=&quot;50&quot;), a percentage (left=&quot;50%&quot;) or a guideid (left=&quot;mx&quot;). There are four intrinsic guides: &quot;left&quot;, &quot;right&quot; and &quot;top&quot;, &quot;bottom&quot;. The value can be followed by a space and an offset number. Examples: left=&quot;50&quot; , right=&quot;50%&quot;, xcenter=&quot;mx&quot;, left=&quot;mx -2&quot;, xcenter=&quot;50% 10&quot;.</description></attribute><attribute name="right"><name>right</name><description>Right position of a component. See left.</description></attribute><attribute name="top"><name>top</name><description>Top position of a component. See left.</description></attribute><attribute name="bottom"><name>bottom</name><description>Bottom position of a component. See left.</description></attribute><attribute name="xcenter"><name>xcenter</name><description>Vertical center position of a component. See left.</description></attribute><attribute name="ycenter"><name>ycenter</name><description>Horizontal center position of a component. See left.</description></attribute><attribute name="listento"><name>listento</name><description>Comma seperated list of component id's. See the component documentation if this attribute is supported.</description></attribute><attribute name="visible"><name>visible</name><description>Visiblity of the component. Reconized values: &quot;true&quot; and &quot;false&quot;</description></attribute><attribute name="maxwidth"><name>maxwidth</name><description>Maximum width of a component in pixels.</description></attribute><attribute name="minwidth"><name>minwidth</name><description>Minimum width of a component in pixels.</description></attribute><attribute name="maxheight"><name>maxheight</name><description>Maximum height of a component in pixels.</description></attribute><attribute name="minheight"><name>minheight</name><description>Minimum height of a component in pixels.</description></attribute><hierarchy>child-node of &lt;flamingo&gt;</hierarchy><description>The Flamingo Framework will parse these (default) attributes for each component in the configuration file.</description></configtag></configtags><methods><method name="addComponent"><name>addComponent</name><parameter name="xml"><name>xml</name><type>Object</type><description>xml-node (or string representation of it) describing the component</description></parameter><description>Adds a component to the flamingo framework.</description><returntype>Void </returntype><arguments>(xml:Object):Void </arguments><usage>public function addComponent(xml:Object):Void </usage></method><method name="clear"><name>clear</name><description>Removes all loaded components and initilizes Flamingo for a fresh start.</description><returntype>Void </returntype><arguments>():Void </arguments><usage>public function clear():Void </usage></method><method name="correctTarget"><name>correctTarget</name><example><![CDATA[<code> flamingo.correctTarget(this._parent, this)</code>]]></example><parameter name="from"><name>from</name><type>Object</type><description>MovieClip or componentid representing the default location at which flamingo assumes the component is loaded.</description></parameter><parameter name="to"><name>to</name><type>Movieclip</type><description>MovieClip representing the correct location of the component.</description></parameter><description>Correct the targetreference of a component in the repository and moves all default flamingo properties. Component are movieclips that are loaded by flamingo with the loadMovie method. By default flamingo assumes that the loaded movieclip is actually the component. When you make components and use subclasses of MovieClips than things are a bit different. In that case the component movieclip can be situated one or more levels deeper and a correction is necesarry.</description><returntype>Void </returntype><arguments>(from:Object, to:MovieClip):Void </arguments><usage>public function correctTarget(from:Object, to:MovieClip):Void </usage></method><method name="getComponent"><name>getComponent</name><return>MovieClip of a component</return><parameter name="id"><name>id</name><type>String</type><description>id of a component</description></parameter><description>Gets a component by its identifier.</description><returntype>MovieClip </returntype><arguments>(id:String):MovieClip </arguments><usage>public function getComponent(id:String):MovieClip </usage></method><method name="getConfigFile"><name>getConfigFile</name><return>filename</return><description>Get the configuration filename.</description><returntype>String </returntype><arguments>():String </arguments><usage>public function getConfigFile():String </usage></method><method name="getCookie"><name>getCookie</name><return>the cookie-object</return><parameter name="id"><name>id</name><type>String</type><description>cookie-identifyer</description></parameter><description>Gets a saved 'flamingo' cookie.</description><returntype>Object </returntype><arguments>(id:String):Object </arguments><usage>public function getCookie(id:String):Object </usage></method><method name="getLanguage"><name>getLanguage</name><return>language string</return><description>Gets the language.</description><returntype>String </returntype><arguments>():String </arguments><usage>public function getLanguage():String </usage></method><method name="getParent"><name>getParent</name><return>MovieClip</return><parameter name="comp"><name>comp</name><type>Object</type><description>id or MovieClip representing the component</description></parameter><description>Gets the parent of a component. This parent is not the same as the 'flash' _parent.</description><returntype>MovieClip </returntype><arguments>(comp:Object):MovieClip </arguments><usage>public function getParent(comp:Object):MovieClip </usage></method><method name="getPosition"><name>getPosition</name><example><![CDATA[<code> function resize(){<br> var rect:Object = flamingo.getPosition(this)<br> this._x = rect.x<br> this._y = rect.y<br> this._width = rect.width<br> this._height = rect.height</code><br> }]]></example><return>rect, a rect is an object with the properties; x, y, width, height</return><parameter name="comp"><name>comp</name><type>Object</type><description>MovieClip or componentid</description></parameter><parameter name="parent"><name>parent</name><type>MovieClip</type><description>[optional] parent MovieClip,  default _parent</description></parameter><description>Gets a position of a component.</description><returntype>Object </returntype><arguments>(comp:Object, parent:MovieClip):Object </arguments><usage>public function getPosition(comp:Object, parent:MovieClip):Object </usage></method><method name="getString"><name>getString</name><return>correct string belonging to language setting.</return><parameter name="comp"><name>comp</name><type>Object</type><description>MovieClip or componentid</description></parameter><parameter name="stringid"><name>stringid</name><type>String</type><description>identifier, see configuration files for supported id's</description></parameter><parameter name="defaultstring"><name>defaultstring</name><type>String</type><description>[optional] defaultstring if no match is found.</description></parameter><parameter name="lang"><name>lang</name><type>String</type><description>[optional] language setting.</description></parameter><description>Gets a string from the repository corresponding to the language setting.</description><returntype>String </returntype><arguments>(comp:Object, stringid:String, defaultstring:String, lang:String):String </arguments><usage>public function getString(comp:Object, stringid:String, defaultstring:String, lang:String):String </usage></method><method name="getStyleSheet"><name>getStyleSheet</name><return>StyleSheet object</return><parameter name="comp"><name>comp</name><type>Object</type><description>MovieClip or componentid</description></parameter><description>Gets a stylesheet object of a component.</description><returntype>Object </returntype><arguments>(comp:Object):Object </arguments><usage>public function getStyleSheet(comp:Object):Object </usage></method><method name="getType"><name>getType</name><return>type</return><parameter name="comp"><name>comp</name><type>Object</type><description>MovieClip or componentid</description></parameter><description>Returns the type of a component. This is actually the filename without the path and the ".swf"</description><returntype>String </returntype><arguments>(comp:Object):String </arguments><usage>public function getType(comp:Object):String </usage></method><method name="getUniqueId"><name>getUniqueId</name><return> uniqie id</return><description>Returns a unigue unused identifier.</description><returntype>String </returntype><arguments>():String </arguments><usage>public function getUniqueId():String </usage></method><method name="getVersion"><name>getVersion</name><return>version</return><parameter name="comp"><name>comp</name><type>Object</type><description>MovieClip or componentid</description></parameter><description>Returns the version of a component.</description><returntype>String </returntype><arguments>(comp:Object):String </arguments><usage>public function getVersion(comp:Object):String </usage></method><method name="hideCursor"><name>hideCursor</name><description>Hides custom cursor.</description><returntype>function hideCursor() </returntype><arguments>() </arguments><usage>function hideCursor() </usage></method><method name="hideTooltip"><name>hideTooltip</name><description>Let tooltip disappear.</description><returntype>Void </returntype><arguments>():Void </arguments><usage>public function hideTooltip():Void </usage></method><method name="isConfigLoaded"><name>isConfigLoaded</name><return>true if file is loaded, false if file is not loaded.</return><description>Checks if a configuration file is loaded.</description><returntype>Boolean </returntype><arguments>():Boolean </arguments><usage>public function isConfigLoaded():Boolean </usage></method><method name="isVisible"><name>isVisible</name><return>true or false</return><parameter name="comp"><name>comp</name><type>Object</type><description>MovieClip or componentid</description></parameter><description>Determines if a component is really visible, not just _visible. It checks al the parents. If they are visible, the component is also visible.</description><returntype>Boolean </returntype><arguments>(comp:Object):Boolean </arguments><usage>public function isVisible(comp:Object):Boolean </usage></method><method name="killComponent"><name>killComponent</name><parameter name="comp"><name>comp</name><type>Object</type><description>id or MovieClip representing the component</description></parameter><description>Removes a component and delete all its data in the repository.</description><returntype>Void </returntype><arguments>(comp:Object):Void </arguments><usage>public function killComponent(comp:Object):Void </usage></method><method name="loadComponent"><name>loadComponent</name><parameter name="xml"><name>xml</name><type>XML</type><description>xml-node describing the component rule 1: a component has always a prefix rule 2: double ids are not allowed</description></parameter><parameter name="mc"><name>mc</name><type>Movieclip</type><description>movieclip at which the component is loaded</description></parameter><description>Loads a component and register it at the flamingo framework. This function should be used by components which can load other components.</description><returntype>String </returntype><arguments>(xml:Object, mc:MovieClip):String </arguments><usage>public function loadComponent(xml:Object, mc:MovieClip):String </usage></method><method name="loadConfig"><name>loadConfig</name><parameter name="file"><name>file</name><type>String</type><description>xml file with configuration</description></parameter><description>Loads a configuration file.</description><returntype>Void </returntype><arguments>(file:String):Void </arguments><usage>public function loadConfig(file:String):Void </usage></method><method name="position"><name>position</name><see>getPosition</see><parameter name="comp"><name>comp</name><type>Object</type><description>MovieClip or componentid</description></parameter><parameter name="parent"><name>parent</name><type>MovieClip</type><description>[optional] parent MovieClip,  default _parent</description></parameter><description>Positions a component.</description><returntype>Void </returntype><arguments>(comp:Object, parent:MovieClip):Void </arguments><usage>public function position(comp:Object, parent:MovieClip):Void </usage></method><method name="resize"><name>resize</name><description>Resizes the application and fires the 'onResize' event. This function is triggered by a resize of the stage.</description><returntype>Void </returntype><arguments>():Void </arguments><usage>public function resize():Void </usage></method><method name="setConfig"><name>setConfig</name><parameter name="xml"><name>xml</name><type>Object</type><description>xml or string with configuration</description></parameter><description>Sets a configuration. This configuration can be a xml or a string representing a valid xml.</description><returntype>Void </returntype><arguments>(xml:Object):Void </arguments><usage>public function setConfig(xml:Object):Void </usage></method><method name="setCookie"><name>setCookie</name><parameter name="id"><name>id</name><type>String</type><description>cookie-identifyer</description></parameter><parameter name="obj"><name>obj</name><type>Object</type><description>object to be stored</description></parameter><description>Stores a 'flamingo' cookie.</description><returntype>Void </returntype><arguments>(id:String, obj:Object):Void </arguments><usage>public function setCookie(id:String, obj:Object):Void </usage></method><method name="setLanguage"><name>setLanguage</name><parameter name="lang"><name>lang</name><type>String</type><description>language string</description></parameter><description>Sets the language.</description><returntype>Void </returntype><arguments>(lang:String):Void </arguments><usage>public function setLanguage(lang:String):Void </usage></method><method name="showCursor"><name>showCursor</name><parameter name="cursorid"><name>cursorid</name><type>String</type><description>identifier used in configuration file.</description></parameter><description>Shows custom cursor. A cursor is a flash movie which will be preloaded when the configuration file is loaded. It belongs to a component and is identified by an id. This id can be obtained by 'getCursorId'.</description><returntype>Void </returntype><arguments>(cursorid:String):Void </arguments><usage>public function showCursor(cursorid:String):Void </usage></method><method name="showError"><name>showError</name><parameter name="title"><name>title</name><type>String</type><description>window title</description></parameter><parameter name="error"><name>error</name><type>String</type><description>error text</description></parameter><parameter name="timeout"><name>timeout</name><type>Number</type><description>[optional] the window will disappear after this time</description></parameter><description>Shows an simple error window. Window will disappear after timeout or when the user clicks on it.</description><returntype>Number) </returntype><arguments>(title:String, error:String, timeout:Number) </arguments><usage>function showError(title:String, error:String, timeout:Number) </usage></method><method name="showTooltip"><name>showTooltip</name><parameter name="tiptext"><name>tiptext</name><type>String</type><description>text to be shown</description></parameter><parameter name="object"><name>object</name><type>Object</type><description>movieclip to which the tiptext belongs</description></parameter><parameter name="delay"><name>delay</name><type>Number</type><description>[optional] time between hoovering over object and showing tip</description></parameter><description>Shows a tooltip. Tooltip disappear automatic when cursor is moved of the object.</description><returntype>Void </returntype><arguments>(tiptext:String, object:Object, delay:Number):Void </arguments><usage>public function showTooltip(tiptext:String, object:Object, delay:Number):Void </usage></method></methods><events><event name="onError"><name>onError</name><parameter name="error"><name>error</name><type>String</type><description>error message</description></parameter><description>Fires when an error occurs.</description><returntype>Void </returntype><arguments>(error:String):Void </arguments><usage>public function onError(error:String):Void </usage></event><event name="onInit"><name>onInit</name><description>Fires when flamingo initializes.</description><returntype>Void </returntype><arguments>():Void </arguments><usage>public function onInit():Void </usage></event><event name="onKillComponent"><name>onKillComponent</name><parameter name="id"><name>id</name><type>String</type><description>id of the removed component</description></parameter><description>Fires when a component is removed</description><returntype>Void </returntype><arguments>(id:String):Void </arguments><usage>public function onKillComponent(id:String):Void </usage></event><event name="onLoadComponent"><name>onLoadComponent</name><parameter name="mc"><name>mc</name><type>MovieClip</type><description>the loaded component</description></parameter><description>Fires when a component is loaded.</description><returntype>Void </returntype><arguments>(mc:MovieClip):Void </arguments><usage>public function onLoadComponent(mc:MovieClip):Void </usage></event><event name="onLoadConfig"><name>onLoadConfig</name><parameter name="file"><name>file</name><type>String</type><description>the configuration file</description></parameter><description>Fires when a complete configuration file is loaded</description><returntype>Void </returntype><arguments>():Void </arguments><usage>public function onLoadConfig():Void </usage></event><event name="onResize"><name>onResize</name><description>Fires when the stage is resized.</description><returntype>Void </returntype><arguments>():Void </arguments><usage>public function onResize():Void </usage></event><event name="onSetLanguage"><name>onSetLanguage</name><parameter name="lang"><name>lang</name><type>String</type><description>language which is set</description></parameter><description>Fires when the language is changed.</description><returntype>Void </returntype><arguments>(lang:String):Void </arguments><usage>public function onSetLanguage(lang:String):Void </usage></event></events></component></flamingodoc>